#  Списки (Lists): Задачи для самостоятельной работы

#  Задача 1: Клубный фейсконтроль

#  Сценарий: Отфильтровать список возрастов, оставив только тех, кто достиг 18 лет.
#  •	На входе: Список чисел. [25, 17, 18, 31, 16, 22]
#  •	На выходе: Список чисел, прошедших фильтр. [25, 18, 31, 22]
#  Подсказка: Понадобится пустой список для результатов и цикл с условным добавлением.

# list_age = [23, 17, 18, 31, 16, 22, 15, 33]
# numbers = []
# # n = len(list_age)
# for age in list_age:
#    if age >= 18:
#       numbers.append(age)
# print(numbers)


# Задача 2: Магическое превращение

# Сценарий: Заменить в списке одни элементы на другие по заданным правилам ("лягушка" -> "принц", "тыква" -> "карета"), не трогая остальные.
# •	На входе: Список строк. ['камень', 'лягушка', 'вода', 'тыква', 'лягушка']
# •	На выходе: Новый список с результатами замен. ['камень', 'принц', 'вода', 'карета', 'принц']
# Подсказка: Для обработки нескольких разных условий идеально подходит конструкция if/elif/else.

# list_1 = ['камень', 'лягушка', 'вода', 'тыква', 'лягушка']
# replace_dict = {'лягушка': "принц", 'тыква': "карета"}
# for s in range(len(list_1)):
#    if list_1[s] in replace_dict:
#       list_1[s] = replace_dict[list_1[s]]
# print(list_1)


# Задача 3: Перепись в зоопарке

# Сценарий: Посчитать количество элементов двух разных категорий (хищники и травоядные) в одном общем списке.
# •	На входе: Список строк (животных). ['лев', 'зебра', 'тигр', 'жираф', 'волк', 'слон']
# •	На выходе: Два числа — количество элементов каждой категории. "Хищников: 3, Травоядных: 3"
# Подсказка: Чтобы отличить одну категорию от другой, удобно хранить одну из них в отдельной небольшой коллекции для быстрой проверки с помощью оператора in.

# animals =  ['лев', 'зебра', 'тигр', 'жираф', 'волк', 'слон']
# vegan = ['зебра', 'жираф', 'слон']
# predator = ['лев', 'тигр', 'волк']
# count_vegan = sum(1 for animal in animals if animal in vegan)
# count_predator = sum(1 for animal in animals if animal in predator)
# print(f'травоядных: ', count_vegan, '\n''хищников: ', count_predator)


# Задача 4: Горный поход

# Сценарий: У вас есть список высот, которые альпинист фиксировал каждый час. Вам нужно найти самый длинный непрерывный участок, где он только поднимался (каждая следующая высота больше предыдущей).
# •	На входе: Список чисел. [100, 110, 105, 120, 125, 130, 128]
# •	На выходе: Список, представляющий самый длинный подъем. [120, 125, 130]
# Подсказка: Вам понадобятся переменные для отслеживания как текущей, так и самой длинной найденной последовательности

# high =  [100, 110, 105, 120, 125, 130, 128]
# top = []
# for h in range(len(high)):
#    if h == 100:
#       top.append(h)
#    # else:
#    #    continue
#    print(top)


# Задача 5: Диагонали магического квадрата

# Сценарий: У вас есть матрица (список списков), представляющая магический квадрат. Вам нужно посчитать сумму элементов на главной и побочной диагоналях.
# •	На входе: Список списков одинаковой длины. [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
# •	На выходе: Два числа. "Сумма главной диагонали: 15. Сумма побочной диагонали: 15."
# Подсказка: Ключ к решению — найти математическую связь между индексами строки и столбца для каждой из диагоналей.

# matrix = [[1, 2, 3], 
#           [4, 5, 6], 
#           [7, 8, 9]]



# Кортежи (Tuples): Задачи для самостоятельной работы

# Задача 1: Бюджетные покупки

# Сценарий: Из списка кортежей (название, цена) выбрать только названия тех товаров, цена которых удовлетворяет условию.
# •	На входе: Список кортежей. [('книга', 800), ('ручка', 50), ('рюкзак', 1500)]
# •	На выходе: Список строк (названий). ['книга', 'ручка']
# Подсказка: В цикле обращайтесь к элементам кортежа по их индексам для проверки условия и извлечения нужных данных.




# Словари (Dictionaries): Задачи для самостоятельной работы

# Задача 1: Подсчёт голосов

# Сценарий: Посчитать частоту появления каждого элемента в списке.
# •	На входе: Список строк. ['Маша', 'Петя', 'Вася', 'Маша', 'Петя', 'Маша']
# •	На выходе: Словарь {'элемент': частота}. {'Маша': 3, 'Петя': 2, 'Вася': 1}
# Подсказка: Ключевая логика — проверить, существует ли ключ в словаре, прежде чем пытаться увеличить его значение.

names = ['Маша', 'Петя', 'Вася', 'Маша', 'Петя', 'Маша', 'Николь']
dict_names = {name: names.count(name) for name in names}
# names.count()
print(dict_names)


# Задача 2: Бонусные баллы

# Сценарий: Обновить значения в словаре, если они удовлетворяют определённому условию.
# •	На входе: Словарь. grades = {'Иванов': 55, 'Петров': 72, 'Сидоров': 48}
# •	На выходе: Тот же словарь с измененными значениями. {'Иванов': 60, 'Петров': 72, 'Сидоров': 53}
# Подсказка: Для итерации с возможностью изменения словаря нужно правильно выбрать метод (.keys(), .values() или .items()).

grades = {'Иванов': 55, 'Петров': 72, 'Сидоров': 48}
# name_upd = ['Иванов', 'Сидоров']
# age = 5
# grades_upd = {grade + age if name in name_upd 
#               else grade for name, grade in grades.items()}
# print(grades_upd)

for name, grade in grades.items():
   if grade < 60:
      grades[name] = grade + 5

print(grades)


# Задача 3: Отбор дорогих товаров

# Сценарий: Создать новый словарь из пар ключ-значение исходного словаря, если значение удовлетворяет условию.
# •	На входе: Словарь. inventory = {'ручка': 20, 'книга': 800, 'рюкзак': 1500}
# •	На выходе: Новый, отфильтрованный словарь. {'книга': 800, 'рюкзак': 1500}
# Подсказка: Итерируйтесь по элементам исходного словаря и добавляйте подходящие пары в новый, заранее созданный пустой словарь.


inventory = {'ручка': 20, 'книга': 800, 'рюкзак': 1500}

inventory_new = {}

for item, price in inventory.items():
   if price > 500:
      inventory_new[item] = price

print(inventory_new)


# Задача 4: Инверсия словаря

# Сценарий: Преобразовать словарь {'ключ': 'значение'} в словарь {'значение': 'ключ'}. Гарантируется, что все значения в исходном словаре уникальны.
# •	На входе: Словарь. capitals = {'Россия': 'Москва', 'Франция': 'Париж', 'Италия': 'Рим'}
# •	На выходе: Инвертированный словарь. {'Москва': 'Россия', 'Париж': 'Франция', 'Рим': 'Италия'}
# Подсказка: Вам нужно будет пройти по парам «ключ-значение» исходного словаря и добавить их в новый, поменяв местами.


capitals = {'Россия': 'Москва', 'Франция': 'Париж', 'Италия': 'Рим'}

countries = {}

for country, capital in capitals.items():
   country_i = capital
   capital_i = country
   countries[country_i] = capital_i

print(countries)


# Задача 5: Доступ к вложенным данным

# Сценарий: У вас есть вложенный словарь и строка, представляющая "путь" к данным. Вам нужно написать код, который извлечёт значение по этому пути.
# •	На входе: Вложенный словарь и строка-путь. data = {'user': {'name': 'Alice', 'profile': {'theme': 'dark'}}}, path = 'user.profile.theme'
# •	На выходе: Значение, находящееся по этому пути. 'dark'
# Подсказка: Разбейте строку пути на части и используйте цикл, чтобы последовательно «погружаться» в словарь на каждом шаге.
